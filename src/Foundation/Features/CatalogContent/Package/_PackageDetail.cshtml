@using Mediachase.Commerce﻿
@using EPiServer.Framework.Web.Resources
@using Foundation.Features.CatalogContent.Package
@using Foundation.Features.CatalogContent.Services

@model GenericPackageViewModel

@{
    var shareTitle = Uri.EscapeUriString("Check out this product: " + Model.CurrentContent.DisplayName);
    var shareUrl = Url.Encode(Request.Url.ToString());

    var currentMarket = EPiServer.ServiceLocation.ServiceLocator.Current.GetInstance<Mediachase.Commerce.ICurrentMarket>();
    var market = currentMarket.GetCurrentMarket();
    var priceClass = ((bool)(ViewData["IsBundle"] == null ? false : ViewData["IsBundle"])) ? "price__discount" : "price__old";

    ClientResources.RequireScript("/Assets/js/vendors/dual-listbox.min.js").AtHeader();
    ClientResources.RequireStyle("/Assets/scss/vendors/dual-listbox.css").AtHeader();
}

<input type="hidden" name="productCode" id="productCode" value="@Model.Package.Code" />
<div class="col-12">
    <div class="row">
        <div class="col-md-4 col-sm-12">
            @Html.Partial("_Images", Model.Media)
        </div>
        <div class="col-md-8 col-sm-12">
            <div class="product-detail__title">
                @Html.Partial("_BreadCrumb", Model.BreadCrumb)
                <h5>@Html.PropertyFor(x => x.CurrentContent.DisplayName)</h5>
                <p class="sub-title">@Model.CurrentContent.Code</p>
            </div>
            <hr />
            @Html.Partial("_Rating", Model)
            <hr />
            <div class="row">
                <div class="col-12">
                    @if (Model.IsAvailable)
                    {
                        if (Model.DiscountedPrice < Model.ListingPrice)
                        {
                            <span class="price__old">@Model.ListingPrice.ToString()</span>
                            <span class="price__discount">@Model.DiscountedPrice.ToString()</span>
                        }
                        else
                        {
                            <span class="price__discount">@Model.DiscountedPrice.ToString()</span>
                        }

                        if (Model.SubscriptionPrice.HasValue && Model.SubscriptionPrice.Value.Amount > 0)
                        {
                            <span class="price__discount" style="padding-left: 10px;">
                                @Html.TranslateFallback("/Shared/SubscriptionPrice", "Subscription Price"): @Model.SubscriptionPrice.ToString()
                            </span>
                        }
                        <span class="pull-right in-stock text-success">
                            <i data-feather="check-circle"></i>
                            @Model.InStockQuantity In Stock
                        </span>
                    }
                    else
                    {
                        if (Model.DiscountedPrice > 0 || Model.ListingPrice > 0)
                        {
                            if (Model.DiscountedPrice < Model.ListingPrice)
                            {
                                <span class="price__old">@Model.ListingPrice.ToString()</span>
                                <span class="price__discount">@Model.DiscountedPrice.ToString()</span>
                            }
                            else
                            {
                                <span class="price__discount">@Model.DiscountedPrice.ToString()</span>
                            }
                        }
                        if (Model.SubscriptionPrice.HasValue && Model.SubscriptionPrice.Value.Amount > 0)
                        {
                            <span class="price__discount" style="padding-left: 10px;">
                                @Html.TranslateFallback("/Shared/SubscriptionPrice", "Subscription Price"): @Model.SubscriptionPrice.ToString()
                            </span>
                        }
                        <span class="pull-right in-stock">
                            <i data-feather="x-circle"></i>
                            @Html.TranslateFallback("/Product/NotAvailable", "Not Available")
                        </span>
                    }
                </div>
            </div>
            <br />
            @Html.PropertyFor(x => x.CurrentContent.Description)
            <br />

            @if (Model.Entries != null && Model.Entries.Count() > 0)
            {
                <div class="row">
                    <div class="col-12 variant__group">
                        <div class="row">
                            @foreach (var variant in Model.Entries as IEnumerable<EntryContentBase>)
                            {
                                var price = PriceCalculationService.GetSalePrice(variant.Code, market.MarketId, market.DefaultCurrency);
                                var image = variant.GetDefaultAsset<IContentMedia>();

                                <div style="position: relative" class="col-2 variant__item">
                                    <span id="stamp-@variant.Code" style="position: absolute; top: 30%; left: 20%; font-size: 1.2rem; color: red; border: 1px solid red; display: none">SELECTED</span>
                                    <p style="font-weight:700;">@variant.Code</p>
                                    <picture class="img-fluid variant__image">
                                        <source data-srcset="@image?format=webp" type="image/webp">
                                        <img data-src="@image" class="img-fluid variant__image lazyload" alt="Alternate Text" />
                                    </picture>
                                    <p class="title">@variant.DisplayName</p>
                                    <p class="@priceClass">@(price != null ? price.UnitPrice.ToString() : (new Money(0, market.DefaultCurrency)).ToString())</p>
                                </div>
                            }
                        </div>
                    </div>
                </div>
                <select class="demo" id="select" multiple> </select>
                @Html.Partial("_Store", Model.Stores)
                @Html.Partial("_BuyPackage", new Tuple<string, int, bool>(Model.CurrentContent.Code, Model.MinQuantity, Model.IsAvailable))
            }
            <hr />
            <div class="row">
                <div class="col-12">
                    <span class="light-text cursor-pointer link mailTo">
                        <a href="mailto:?Subject=@shareTitle&body=@shareUrl" title="Share by Email">
                            <i class="light-svg" data-feather="mail"></i>
                            Email to a friend
                        </a>
                    </span>
                    @if (User.Identity.IsAuthenticated && Model.Entries != null && Model.Entries.Count() > 0)
                    {
                        <span class="light-text cursor-pointer link addToWishlist" data="@Model.CurrentContent.Code">
                            <i class="light-svg" data-feather="heart"></i>
                            Add to wishlist
                        </span>

                        if (Model.HasOrganization)
                        {
                            <span class="light-text cursor-pointer link addToSharedCart" data="@Model.CurrentContent.Code">
                                <i class="light-svg" data-feather="shopping-cart"></i>
                                Add to sharedcart
                            </span>
                        }
                    }
                </div>
            </div>
            @Html.Partial("_SocialIconsListing", Model.CurrentContent.DisplayName)
        </div>
    </div>
</div>

<script>
    let variants = [
        @foreach (var item in Model.Entries as IEnumerable<EntryContentBase>)
        {
            @Html.Raw("{ text: '" + item.Code + "', value: '" + item.Code + "'}, ");
        }
    ];
    let dualListbox = new DualListbox("#select", {
        availableTitle: "All variants",
        selectedTitle: "Selected variants",
        addButtonText: ">",
        removeButtonText: "<",
        addAllButtonText: ">>",
        removeAllButtonText: "<<",

        options: variants,
    });

    let selectedVariants = [];

    dualListbox.addEventListener("added", function (event) {
        selectedVariants.push(event.addedElement.dataset.id);
        const stamp = document.querySelector(`#stamp-${event.addedElement.dataset.id}`);
        stamp.style.display = '';
        console.log("SELECTED", selectedVariants);
    });
    dualListbox.addEventListener("removed", function (event) {
        const index = selectedVariants.indexOf(event.removedElement.dataset.id);
        selectedVariants.splice(index, 1);
        const stamp = document.querySelector(`#stamp-${event.removedElement.dataset.id}`);
        stamp.style.display = 'none';
        console.log("SELECTED", selectedVariants);
    });

    let addToCartButton = document.querySelector(".jsAddCustomPackageToCart");
    addToCartButton.addEventListener("click", () => {
        let varidantsCode = selectedVariants;

    })
</script>